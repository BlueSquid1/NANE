#include <catch2/catch.hpp>

#include "NES/Memory/BitUtil.h"
#include "NES/Cartridge/CartridgeLoader.h"

/**
 * tests if the nestest.nes rom can be parsed properly.
 */
TEST_CASE("parse nestest.nes rom") {
  const std::string nestestPath = "NANE/test/resources/nestest.nes";

  CartridgeLoader inesParser;
  std::unique_ptr<INes> ines = inesParser.ParseINes(nestestPath);
  REQUIRE(ines.get() != NULL);
  REQUIRE(ines->GetPrgRomLen() == 1 * 16384);
  REQUIRE(ines->GetChrRomLen() == 1 * 8192);
  REQUIRE(ines->GetMirroringType() == INes::horizontal);
  REQUIRE(ines->GetBatteryPresent() == false);
  REQUIRE(ines->GetTrainerPresent() == false);
  REQUIRE(ines->GetMapperNumber() == 0);

  std::vector<byte> prgRomStart = {0x4c, 0xf5, 0xc5, 0x60, 0x78, 0xd8, 0xa2, 0xff, 0x9a, 0xad, 0x02, 0x20, 0x10, 0xfb, 0xad, 0x02,
	0x20, 0x10, 0xfb, 0xa9, 0x00, 0x8d, 0x00, 0x20, 0x8d, 0x01, 0x20, 0x8d, 0x05, 0x20, 0x8d, 0x05};
  for(unsigned int i = 0; i < prgRomStart.size(); ++i)
  {
    REQUIRE(ines->GetPrgRomData()->at(i) == prgRomStart.at(i));
  }

  std::vector<byte> prgRomEnd = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xc5, 0x04, 0xc0, 0xf4, 0xc5};

  for(unsigned int i = 0; i < prgRomEnd.size(); ++i)
  {
    int offset = 16352;
    REQUIRE(ines->GetPrgRomData()->at(i + offset) == prgRomEnd.at(i));
  }


  std::vector<byte> chrRomStart = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x80, 0xff, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0xff, 0x80, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0xff, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0xff, 0x01, 0x01, 0x00, 0x00, 0x00};

  for(unsigned int i = 0; i < chrRomStart.size(); ++i)
  {
    REQUIRE(ines->GetChrRomData()->at(i) == chrRomStart.at(i));
  }


  for(int i = 0; i < 80; ++i)
  {
    int offset = 8112;
    REQUIRE(ines->GetChrRomData()->at(i + offset) == 0);
  }
}



